// This file is part of the OpenNMS(R) MIB Parser.
//
// Copyright (C) 2002-2003 John Rodriguez
//
// OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// See: http://www.fsf.org/copyleft/lesser.html
//

/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ParseMib.jj */
/*@egen*//**
 *
 * John Rodriguez
 * JavaCC grammar for parsing SNMP MIBS and generating
 * xml for OpenNms Object Identifiers (OIDS)
 *
 */

options{
 LOOKAHEAD = 3;
 FORCE_LA_CHECK = true;
}

PARSER_BEGIN(ParseMib)

import java.util.Vector;

class ParseMib/*@bgen(jjtree)*/implements ParseMibTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParseMibState jjtree = new JJTParseMibState();

/*@egen*/

  protected static Token lastObjectIdentifierToken = null;

  public static void main(String args[]) {

    try {
      if (args.length == 0) {
          System.out.println("usage: ParseMib [-debug] files");
          System.out.println("version: " + Version.versionString);
          System.exit(0);
      }

      boolean setDebug = false;
      Vector argsList = new Vector();
      String arg = null;

      for (int i = 0; i < args.length; i++) {
           arg = args[i];
           // System.out.println("arg=#" + args[i] + "#");
           if (arg.equalsIgnoreCase("-debug"))
               setDebug = true;
           else if (arg.equalsIgnoreCase("")) {
               // artifact from shell, ant or error, ignore
           }
           else
               argsList.addElement(arg);
      }

      SimpleNode.setDebug(setDebug);

      SimpleNode n = null;

      boolean firstFile = true;
      ParseMib parser = null;
      for (int i = 0; i < argsList.size(); i++) {
           arg = (String)argsList.elementAt(i);
           if (setDebug) System.out.println("JavaCC Parser:  Reading from file " + arg + " . . .");

           try {
            if (firstFile)
                parser = new ParseMib(new java.io.FileInputStream(arg));
            else
                parser.ReInit(new java.io.FileInputStream(arg));
           } catch (java.io.FileNotFoundException fnf) {
                System.err.println("ERROR: the file '" + arg +
                   "' was not found or is mis-spelled");
                System.exit(Errors.FILE_NOT_FOUND);
           }

           n = parser.Start();
           if (setDebug)
               n.dump("");
           firstFile = false;

           // must be called in this order because the ast is
           // decorated on each walk
           // 1) collectTableInfo
           // 2) collectTableIndexInfo
           // 3) collectSequenceInfo
           // 4) collectOids
           // 5) collectTextualConventionsInfo
           if (setDebug) System.out.println("collect table information");
           n.markNotVisited(); // mark the abstract syntax tree as not visited
           n.collectTableInfo();

           if (setDebug) System.out.println("collect table index information");
           n.markNotVisited(); // mark the abstract syntax tree as not visited
           n.collectTableIndexInfo();

           if (setDebug) System.out.println("collect sequence info information");
           n.markNotVisited(); // mark the abstract syntax tree as not visited
           n.collectSequenceInfo();

           if (setDebug) System.out.println("collect oids");
           n.markNotVisited(); // mark the abstract syntax tree as not visited
           n.collectOids();

           if (setDebug) System.out.println("collect type information");
           n.markNotVisited(); // mark the abstract syntax tree as not visited
           n.collectTextualConventionsInfo();

           // System.out.println("Dumping SymbolTables");
           // n.dumpSymbolTables();

           n.writeOids();
      }

      if (setDebug) System.out.println("Thank you.");
    } catch (Throwable e) {
      System.err.println("Oops.");
      System.err.println(e.getMessage());
      e.printStackTrace();
      System.exit(Errors.UNKNOWN_FATAL);
    }
  }
}

PARSER_END(ParseMib)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

/* MIB RESERVED WORDS AND LITERALS */

TOKEN :
{
  < IMPORTS: "IMPORTS" >
| < BEGIN: "BEGIN" >
| < FROM: "FROM" >
| < STATUS: "STATUS" >
| < DESCRIPTION: "DESCRIPTION" >
| < REFERENCE_TOKEN: "REFERENCE" >
| < DEFVAL_TOKEN: "DEFVAL" >
| < AUGMENTS_TOKEN: "AUGMENTS" >
| < END: "END" >
| < SYNTAX_TOKEN: "SYNTAX" >
| < UNITS_TOKEN: "UNITS" >
| < ACCESS_TOKEN: "ACCESS" >
| < MAX_ACCESS_TOKEN: "MAX-ACCESS" >
| < MIN_ACCESS_TOKEN: "MIN-ACCESS" >
| < NOTIFICATION_TYPE_TOKEN: "NOTIFICATION-TYPE" >
| < TRAP_TYPE_TOKEN: "TRAP-TYPE" >
| < LAST_UPDATED_TOKEN: "LAST-UPDATED" >
| < MODULE_IDENTITY_TOKEN: "MODULE-IDENTITY" >
| < ORGANIZATION_TOKEN: "ORGANIZATION" >
| < CONTACT_INFO_TOKEN: "CONTACT-INFO" >
| < REVISION_TOKEN: "REVISION" >
| < SIZE_TOKEN: "SIZE" >
| < SEQUENCE_TOKEN: "SEQUENCE" >
| < OF_TOKEN: "OF" >
| < INDEX_TOKEN: "INDEX" >
| < MODULE_COMPLIANCE_TOKEN: "MODULE-COMPLIANCE" >
| < MODULE_TOKEN: "MODULE" >
| < MANDATORY_GROUPS_TOKEN: "MANDATORY-GROUPS" >
| < GROUP_TOKEN: "GROUP" >
| < OBJECT_GROUP_TOKEN: "OBJECT-GROUP" >
| < NOTIFICATION_GROUP_TOKEN: "NOTIFICATION-GROUP" >
| < NOTIFICATIONS_TOKEN: "NOTIFICATIONS" >
| < TEXTUAL_CONVENTION_TOKEN: "TEXTUAL-CONVENTION" >
| < DISPLAY_HINT_TOKEN: "DISPLAY-HINT" >
| < OCTET_TOKEN: "OCTET" >
| < STRING_TOKEN: "STRING" >
| < ENTERPRISE_TOKEN: "ENTERPRISE" >
| < VARIABLES_TOKEN: "VARIABLES" >
}


/* OBJECT TYPES */
TOKEN :
{
  < OBJECT_TYPE: "OBJECT-TYPE" >
| < OBJECT_IDENTITY: "OBJECT-IDENTITY" >
| < OBJECT_TOKEN: "OBJECT" >
| < OBJECTS_TOKEN: "OBJECTS" >
| < IDENTIFIER_TOKEN: "IDENTIFIER" >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < QUOTE: "\"" >
}


TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        (["-"])? <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "'" (["0"-"9","a"-"f","A"-"F"])* "'h" >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < DESCRIPTOR_LITERAL:
      "\"" ( ~["\""] )* "\""
  >
|
  < REVISION_LITERAL: "\"" (["0"-"9"])+ ["z", "Z"] "\"" >}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z","-"] >
|
  < #DIGIT: ["0"-"9"] >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "::=" >
}


SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  // LIGHTSURF-COMPONENT-REG DEFINITIONS ::= BEGIN
  MibBegin()
  (Imports())*
  (Declaration() | SequenceOfVarsOrTextConvention() | Events() |
     TrapType() | Assignment() | ModuleIdentity() )*
  End()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MibBegin() : {/*@bgen(jjtree) MibBegin */
  SimpleNode jjtn000 = new SimpleNode(JJTMIBBEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MibBegin */
  try {
/*@egen*/
  //System.out.println("MibBegin");
  Expression() (<IDENTIFIER> <ASSIGN> <BEGIN>)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Imports() : {/*@bgen(jjtree) Imports */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Imports */
  try {
/*@egen*/
  //     IMPORTS
  //	enterprises, OBJECT-TYPE
  //			FROM SNMPv2-SMI;
  <IMPORTS> ((
    ( <IDENTIFIER> | <OBJECT_TYPE> | <NOTIFICATION_TYPE_TOKEN> | <MODULE_IDENTITY_TOKEN> |
      <MODULE_COMPLIANCE_TOKEN> | <OBJECT_GROUP_TOKEN> | <NOTIFICATION_GROUP_TOKEN> |
      <TRAP_TYPE_TOKEN> | <TEXTUAL_CONVENTION_TOKEN> | <OBJECT_IDENTITY> )
    (<COMMA>)*)+ <FROM> <IDENTIFIER>)+ <SEMICOLON>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ModuleIdentity() : {/*@bgen(jjtree) ModuleIdentity */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEIDENTITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleIdentity */
  try {
/*@egen*/
    // similar to Declaration(), parse something like:
    // snmpMIB MODULE-IDENTITY
    // LAST-UPDATED "9511090000Z"
    // ORGANIZATION "IETF SNMPv2 Working Group"
    // CONTACT-INFO
    //         "        Marshall T. Rose
    //
    //          Postal: Dover Beach Consulting, Inc.
    //                  420 Whisman Court
    //                  Mountain View, CA  94043-2186
    //                  US
    //
    //             Tel: +1 415 968 1052
    //
    //          E-mail: mrose@dbc.mtview.ca.us"
    // DESCRIPTION
    //         "The MIB module for SNMPv2 entities."
    // REVISION      "9304010000Z"
    // DESCRIPTION
    //         "The initial revision of this MIB module was published as
    //         RFC 1450."
    // ::= { snmpModules 1 }

  ObjectIdentifier() <MODULE_IDENTITY_TOKEN>
      ((<LAST_UPDATED_TOKEN> <DESCRIPTOR_LITERAL>) |
      (<ORGANIZATION_TOKEN> <DESCRIPTOR_LITERAL>) |
      (<DESCRIPTION> <DESCRIPTOR_LITERAL>) |
      (<CONTACT_INFO_TOKEN> <DESCRIPTOR_LITERAL>) |
      (<REVISION_TOKEN> <DESCRIPTOR_LITERAL> ) )+
      <ASSIGN> <LBRACE> ParentObjectIdentifier() IntegerOID() <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}

void Declaration()          : {/*@bgen(jjtree) DeclOID */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclOID */
  try {
/*@egen*/
  // lightsurf OBJECT-IDENTITY
  //   STATUS current
  //  	    DESCRIPTION
  //  		"This describes the OID infrastructure for the mandated Lightsurf hierarchy"
  //          ::=  {  enterprises  15420  }
  //
  //
  // or there could be a different type of SYNTAX
  //   SYNTAX Integer32(1..100)
  // or the SYNTAX could be like:
  //   SYNTAX      DisplayString (SIZE (0..255))
  // or the SYNTAX could be a table decl like:
  //   SYNTAX SEQUENCE OF varTpe
  // or the SYNTAX could be like:
  //   SYNTAX INTEGER { enabled(1), disabled(2) }
  // or it could be declared like:
  //   module OBJECT IDENTIFIER ::= { sprint 1 }
  // or there could be:
  //   MODULE  -- this module
  //         MANDATORY-GROUPS { ifGeneralInformationGroup, ifStackGroup2 }
  //
  // this form makes building oids harder (multipleOids)
  // mgmt OBJECT IDENTIFIER ::= { iso org(3) dod(6) internet(1) mgmt(2) }
  // this is equivalent
  // mgmt OBJECT IDENTIFIER ::= { internet 2 }
  //
  // DEFVAL can have some weird syntax (RFC1382-MIB as an example)
  // DEFVAL { pvc }
  // DEFVAL { {0 0} }
  // DEFVAL { ''h }
  // DEFVAL { 128 }

  ObjectIdentifier()
    (( (<OBJECT_IDENTITY> | <OBJECT_TYPE> | <MODULE_COMPLIANCE_TOKEN> | <OBJECT_GROUP_TOKEN> )
    ( <STATUS> <IDENTIFIER> | (<DESCRIPTION> | <REFERENCE_TOKEN> | <UNITS_TOKEN>) <DESCRIPTOR_LITERAL> |
      <DEFVAL_TOKEN> ( <DESCRIPTOR_LITERAL> | <LBRACE> [<LBRACE>] (<IDENTIFIER>|<INTEGER_LITERAL>)+ <RBRACE> [<RBRACE>] | <INTEGER_LITERAL> ) |
      <MODULE_TOKEN> <MANDATORY_GROUPS_TOKEN> <LBRACE> (<IDENTIFIER> [<COMMA>])+ <RBRACE> |
      <GROUP_TOKEN> <IDENTIFIER> | <AUGMENTS_TOKEN> <LBRACE> <IDENTIFIER> <RBRACE> |
      <OBJECT_TOKEN> <IDENTIFIER> |
      <OBJECTS_TOKEN> <LBRACE> (<IDENTIFIER> [<COMMA>])+ <RBRACE> |
        <SYNTAX_TOKEN> (<OBJECT_TOKEN> <IDENTIFIER_TOKEN> | <OCTET_TOKEN> <STRING_TOKEN> [SizeDeclaration()] |
        TableSequenceOf() |
        GetTypeIdentifier() (SizeDeclaration() |
        <LBRACE> (<IDENTIFIER> <LPAREN> <INTEGER_LITERAL> <RPAREN> [<COMMA>])+ <RBRACE> )* ) |
      (<ACCESS_TOKEN> | <MAX_ACCESS_TOKEN> | <MIN_ACCESS_TOKEN>) GetAccessIdentifier() |
      IndexOfTable() |
     <ASSIGN> <LBRACE> ParentObjectIdentifier() IntegerOID() <RBRACE> )*)
    | IndexOfTable() |
    ( <OBJECT_TOKEN> <IDENTIFIER_TOKEN>
    <ASSIGN> <LBRACE> ParentObjectIdentifier() (MultipleOids())* [IntegerOID()] <RBRACE>))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// handle NOTIFICATION-TPYE
// at this time it just mostly skips the info here
// it would be easy to walk the trees later and output xml
// for the traps
void Events() : {/*@bgen(jjtree) Events */
  SimpleNode jjtn000 = new SimpleNode(JJTEVENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Events */
  try {
/*@egen*/
  //    overSmsQueueThreshold NOTIFICATION-TYPE
  //      STATUS current
  //      OBJECTS { smsInQueue }
  //      DESCRIPTION "The SMS queue has more messages than the configurable threshold.
  //      This event will be sent on every poll until the messages fall below the threshold.
  //      The number of sms currently in the queue is sent with the trap."
  //      ::= { events 1 }
  //
  // or there could be something like this:
  //   NOTIFICATIONS { coldStart, authenticationFailure }

  <IDENTIFIER> (<NOTIFICATION_TYPE_TOKEN> | <NOTIFICATION_GROUP_TOKEN>)
  (<STATUS> <IDENTIFIER> | <DESCRIPTION> <DESCRIPTOR_LITERAL> |
    <OBJECTS_TOKEN> <LBRACE> (<IDENTIFIER> [<COMMA>])+ <RBRACE> |
    <NOTIFICATIONS_TOKEN> <LBRACE> (<IDENTIFIER> [<COMMA>])+ <RBRACE> |
    <ASSIGN> <LBRACE> <IDENTIFIER> <INTEGER_LITERAL> <RBRACE>)*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// handle the TRAP-TYPE, this is just different enough from
// NOTIFICATION-TYPE that I wanted to keep them separate
void TrapType() : {/*@bgen(jjtree) TrapType */
  SimpleNode jjtn000 = new SimpleNode(JJTTRAPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TrapType */
  try {
/*@egen*/
//    egpNeighborLoss TRAP-TYPE
//           ENTERPRISE  snmp
//           VARIABLES   { egpNeighAddr }
//           DESCRIPTION
//                          "An egpNeighborLoss trap signifies that an EGP
//                          neighbor for whom the sending protocol entity
//                          was an EGP peer has been marked down and the
//                          peer relationship no longer obtains."
//           ::= 5

  <IDENTIFIER> <TRAP_TYPE_TOKEN>
  (<STATUS> <IDENTIFIER> | <DESCRIPTION> <DESCRIPTOR_LITERAL> |
    <ENTERPRISE_TOKEN> <IDENTIFIER> |
    <VARIABLES_TOKEN> <LBRACE> (<IDENTIFIER> [<COMMA>])+ <RBRACE> |
    <ASSIGN> [<LBRACE> <IDENTIFIER>] <INTEGER_LITERAL> [<RBRACE>])*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TableSequenceOf() :
{/*@bgen(jjtree) TableSequenceOf */
    SimpleNode jjtn000 = new SimpleNode(JJTTABLESEQUENCEOF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) TableSequenceOf */
  try {
/*@egen*/
    // The AST has to be marked with a table because the index
    // could be anything from 1 to N, rather than just "0" as with
    // other OIDS. So the index is saved symbolically.
    // This means that we have to recognize the following
    // in the MIB ASN.1 on 3 different declarations
    // 1) "SEQUENCE OF varTpe" - from table OID
    // 2) "INDEX      { sysORIndex }" from the index OID
    // 3) "SEQUENCE {...} - has the OID with the index name first
    // and then mark each one in the AST to retrieve later.
    //
    // sysORTable OBJECT-TYPE
    // SYNTAX     SEQUENCE OF SysOREntry
    // MAX-ACCESS not-accessible
    // STATUS     current
    // DESCRIPTION
    //         "The (conceptual) table listing the capabilities of the
    //         local SNMPv2 entity acting in an agent role with respect to
    //         various MIB modules.  SNMPv2 entities having dynamically-
    //         configurable support of MIB modules will have a
    //         dynamically-varying number of conceptual rows."
    // ::= { system 9 }
    //
    // sysOREntry OBJECT-TYPE
    //     SYNTAX     SysOREntry
    //     MAX-ACCESS not-accessible
    //     STATUS     current
    //    DESCRIPTION
    //             "An entry (conceptual row) in the sysORTable."
    //     INDEX      { sysORIndex }
    //     ::= { sysORTable 1 }
    //
    // SysOREntry ::= SEQUENCE {
    //     sysORIndex     INTEGER,
    //     sysORID        OBJECT IDENTIFIER,
    //     sysORDescr     DisplayString,
    //     sysORUpTime    TimeStamp

  <SEQUENCE_TOKEN> <OF_TOKEN> t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IndexOfTable() :
{/*@bgen(jjtree) IndexOfTable */
    SimpleNode jjtn000 = new SimpleNode(JJTINDEXOFTABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) IndexOfTable */
    try {
/*@egen*/
    // Related to the table decl TableSequenceOf.
    // This will be the index of a tabel.
    //    INDEX      { sysORIndex }
    //    INDEX   { atIfIndex, atNetAddress } 2nd index TBD not handled correctly?
    <INDEX_TOKEN> <LBRACE> t=<IDENTIFIER> (<COMMA> <IDENTIFIER>)* <RBRACE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// handle identifier :== identifier
void Assignment() :
{/*@bgen(jjtree) Assignment */
    SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Assignment */
  try {
/*@egen*/
    // quite a few different kinds of identifiers
    //    RouterID ::= IpAddress
    //    AutonomousType    ::= OBJECT IDENTIFIER
    //    Metric    ::= INTEGER (1..'FFFF'h)
    //    TruthValue ::= INTEGER { true (1), false (2) }
    //    Status ::= INTEGER { enabled (1), disabled (2) }
  t=<IDENTIFIER> <ASSIGN> (GetTypeIdentifier() | <OBJECT_TOKEN> <IDENTIFIER_TOKEN>)
    [(<LPAREN> <INTEGER_LITERAL> "." "." <INTEGER_LITERAL> <RPAREN> |
     <LBRACE> (<IDENTIFIER> <LPAREN> <INTEGER_LITERAL> <RPAREN> [<COMMA>])+ <RBRACE>)]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    // save the subtype name from the first identifier just like
    // TextConvention() did
    // this makes a tree with the subtype in the parent and
    // the base type in the child. These are put in symbol tables
    // later so we can get to the right types and output base types
    // to XML.
    {
        jjtn000.setName(t.image);
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SequenceOfVarsOrTextConvention() : {/*@bgen(jjtree) SequenceOfVarsOrTextConvention */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCEOFVARSORTEXTCONVENTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}

{/*@bgen(jjtree) SequenceOfVarsOrTextConvention */
    try {
/*@egen*/
    // both start with identifier :==
    ObjectIdentifier() <ASSIGN> (SequenceOfVars() | TextConvention())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SequenceOfVars()               : {/*@bgen(jjtree) TableOidVars */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLEOIDVARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TableOidVars */
    try {
/*@egen*/
    // SysOREntry ::= SEQUENCE {
    // sysORIndex     INTEGER,
    // sysORID        OBJECT IDENTIFIER,
    // sysORDescr     DisplayString,
    // sysORUpTime    TimeStamp,
    // ifDescr        OCTET STRING,
    // tcpConnLocalPort INTEGER (0..65535),
    // ds1CircuitIdentifier DisplayString (SIZE (0..255))
    //
    (<SEQUENCE_TOKEN> <LBRACE>
      (IdentifierInSequenceOfVars()
      ( <IDENTIFIER> ( SizeDeclaration() | <LPAREN> <INTEGER_LITERAL> "." "." <INTEGER_LITERAL> <RPAREN>)* |
      <OBJECT_IDENTITY> | <OBJECT_TYPE> |
      <OBJECT_TOKEN> <IDENTIFIER_TOKEN> | <OCTET_TOKEN> <STRING_TOKEN> [SizeDeclaration()])
      (<COMMA>)* )+ <RBRACE>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(lastObjectIdentifierToken.image);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TextConvention() : {/*@bgen(jjtree) TextConvention */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTCONVENTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TextConvention */
  try {
/*@egen*/
  // The TEXTUAL-CONVENTION is different enough from the other declarations
  // that it merits it's own scanning, even though it does reuse tokens
  // that other declarations catch. Also, the base type of the declaration
  // must be saved in the AST and later in the symbol table. The base type
  // in the example below would be Integer32 and it will be associated with
  // QueueStates in the symbol table during AST walks.
  //
  // QueueStates ::= TEXTUAL-CONVENTION
  // DISPLAY-HINT "d"
  // SYNTAX Integer32 { pause(1), start(2) }
  // STATUS current
  // DESCRIPTION "The current state a queue is in."
  //
  // another way to declare a text convention is
  // DisplayString ::= OCTET STRING (SIZE (0..255))


  <TEXTUAL_CONVENTION_TOKEN>
  ( <STATUS> <IDENTIFIER> |
    (<DESCRIPTION> | <REFERENCE_TOKEN>) <DESCRIPTOR_LITERAL> |
    <DISPLAY_HINT_TOKEN> <DESCRIPTOR_LITERAL> |
    <OBJECTS_TOKEN> <LBRACE> (<IDENTIFIER> [<COMMA>])+ <RBRACE> |
    <SYNTAX_TOKEN> (<OBJECT_TOKEN> <IDENTIFIER_TOKEN> | <OCTET_TOKEN> <STRING_TOKEN>  [SizeDeclaration()] |
       GetTypeIdentifier() [( SizeDeclaration() |
    <LBRACE> (<IDENTIFIER> <LPAREN> <INTEGER_LITERAL> <RPAREN> [<COMMA>])+ <RBRACE> )] )
  )+ |
   <OCTET_TOKEN> <STRING_TOKEN>  [SizeDeclaration() | <LBRACE> (<IDENTIFIER> <LPAREN> <INTEGER_LITERAL> <RPAREN> [<COMMA>])+ <RBRACE>]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
     jjtn000.setName(lastObjectIdentifierToken.image);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IdentifierInSequenceOfVars() :
{/*@bgen(jjtree) IdentifierInSequenceOfVars */
    SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIERINSEQUENCEOFVARS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) IdentifierInSequenceOfVars */
    try {
/*@egen*/
    // called from SequenceOfVars()
    // mark each ast node in the sequence
    t=<IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        jjtn000.setIsOidInTable(true);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void End() : {/*@bgen(jjtree) End */
  SimpleNode jjtn000 = new SimpleNode(JJTEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) End */
   try {
/*@egen*/
   <END>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ObjectIdentifier() :
{/*@bgen(jjtree) ObjectIdentifier */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJECTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ObjectIdentifier */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
    lastObjectIdentifierToken = t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ParentObjectIdentifier()         :
{/*@bgen(jjtree) Parent */
  SimpleNode jjtn000 = new SimpleNode(JJTPARENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Parent */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setParentName(t.image);
    jjtn000.setName(lastObjectIdentifierToken.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ChildTextIdentifier() :
{/*@bgen(jjtree) ChildTextIdentifier */
  SimpleNode jjtn000 = new SimpleNode(JJTCHILDTEXTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ChildTextIdentifier */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ChildNumericIdentifier() :
{/*@bgen(jjtree) ChildNumericIdentifier */
  SimpleNode jjtn000 = new SimpleNode(JJTCHILDNUMERICIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ChildNumericIdentifier */
  try {
/*@egen*/
  t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// handle the oids after "iso"
// mgmt OBJECT IDENTIFIER ::= { iso org(3) dod(6) internet(1) mgmt(2) }
void MultipleOids() : {/*@bgen(jjtree) MultipleOids */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLEOIDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MultipleOids */
  try {
/*@egen*/
  ChildTextIdentifier() <LPAREN> ChildNumericIdentifier() <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// handle
// (SIZE (0..255))
// (SIZE (0 | 8 | 11))
// (SIZE (6))
// (SIZE (1 | 4..85))
// (1)
void SizeDeclaration() : {/*@bgen(jjtree) SizeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTSIZEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SizeDeclaration */
  try {
/*@egen*/
  <LPAREN>
    (
      <SIZE_TOKEN> <LPAREN>
         (<INTEGER_LITERAL> [ "." "." <INTEGER_LITERAL> ] [ "|" ])+ <RPAREN> |
      (<INTEGER_LITERAL> ["." "." <INTEGER_LITERAL>] [ "|" ])+
    )
  <RPAREN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Integer() : {/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  <INTEGER_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IntegerOID()             :
{/*@bgen(jjtree) PartialOID */
  SimpleNode jjtn000 = new SimpleNode(JJTPARTIALOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) PartialOID */
  try {
/*@egen*/
  t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// usually called after SYNTAX, e.g. SYNTAX Counter32
// also for TextConvention and Assignment to get the child
// node in the right place.
void GetTypeIdentifier() :
{/*@bgen(jjtree) GetTypeIdentifier */
  SimpleNode jjtn000 = new SimpleNode(JJTGETTYPEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) GetTypeIdentifier */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// usually called after ACCESS, e.g. ACCESS read-write
void GetAccessIdentifier() :
{/*@bgen(jjtree) GetAccessIdentifier */
  SimpleNode jjtn000 = new SimpleNode(JJTGETACCESSIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) GetAccessIdentifier */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
