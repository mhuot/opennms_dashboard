<?xml version="1.0" encoding="UTF-8"?>
<chapter id="installing">
	<title>Installing OpenNMS</title>

	<note>
		<para>
			You need to be root when running most of the commands in this chapter.
		</para>
	</note>

	<section id="installing-data-locations">
		<title>Where to Find OpenNMS Data</title>

		<para>OpenNMS stores data in a number of locations:</para>

		<glosslist>
			<glossentry>
				<glossterm>
					<filename>$OPENNMS_HOME/etc/</filename>
				</glossterm>

				<glossdef>
					<para>OpenNMS configuration files.</para>
					<para>
						On some distributions, upstream changes in files in this directory
						are detected and means are provided for migrating those changes to
						the new release.
					</para>
					<para>
						On RPM-based distributions, if an OpenNMS configuration file has changed,
						RPM will create a "<filename>.rpmnew</filename>" file which contains the
						version of that configuration file that shipped with the new version of
						OpenNMS. You will need to look at the changes between your file
						and the new one and merge them manually, at the moment. The command
						"<code>diff -u &lt;old file&gt; &lt;new file&gt; | less</code>" can
						assist you in seeing what has changed.
					</para>
					<para>
						On Debian-based distributions, dpkg will automatically prompt you when
						a configuration file has changed upstream between versions, and will offer
						you a set of options to deal with it.
					</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm><filename>$OPENNMS_HOME/share/rrd/</filename></glossterm>

				<glossdef>
					<para>
						RRD data files that store response time data and performance data collected
						from SNMP (and elsewhere).  The installer should not touch the RRD files in
						<filename>$OPENNMS_HOME/share/rrd</filename>.  Unless you are migrating from
						RRDTool to jRobin, you should not have to worry about them.
					</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>
					<filename>$OPENNMS_HOME/jetty-webapps/opennms/</filename>
				</glossterm>

				<glossdef>
					<para>
						The OpenNMS web application. While data is not stored here, some users may
						customize the web interface and these customizations should be saved before
						upgrading OpenNMS.
					</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm><filename>$PGDATA/</filename></glossterm>

				<glossdef>
					<para>
						Data about nodes, services, events, notifications, etc., are stored in the
						<code>opennms</code> table in PostgreSQL.
					</para>
				</glossdef>
			</glossentry>
		</glosslist>
	</section>

	<section id="installing-fresh">
		<title>Performing a Fresh Install</title>

		<para>
			Follow the instructions in this section appropriate for your operating
			system if you are performing a fresh install.  If you are upgrading an
			existing installation of OpenNMS, see the next section.
		</para>

		<section id="installing-rpm">
			<title>Installing on RPM-Based Distributions</title>

			<section id="installing-rpm-determine">
				<title>Determine What to Install</title>
				
				<para>
					As of version 1.6, OpenNMS is packaged in a modular fashion.  The
					following packages are available for installation:
				</para>
				
				<itemizedlist>
					<listitem>
						<para>
							<emphasis>opennms-core</emphasis>: The core OpenNMS code,
							responsible for network discovery, polling, data collection,
							notification, and more.
						</para>
					</listitem>

					<listitem>
						<para>
							<emphasis>opennms-docs</emphasis>: Documentation.
						</para>
					</listitem>
					
					<listitem>
						<para>
							<emphasis>opennms-webapp-jetty</emphasis>: The OpenNMS web
							UI, designed to be started by the opennms-core engine.
						</para>
					</listitem>
					
					<listitem>
						<para>
							<emphasis>opennms</emphasis>: A convenience package which
							installs everything you need for a functional OpenNMS
							installation on a single system.
						</para>
					</listitem>

					<listitem>
						<para>
							<emphasis>opennms-remote-poller</emphasis>: The standalone
							remote poller, which can report back to an OpenNMS instance.
						</para>
					</listitem>
					
					<listitem>
						<para>
							<emphasis>opennms-plugin-ticketer-centric</emphasis>: The
							<ulink url="http://www.concursive.com/">CentricCRM/Concursive</ulink>
							ticketer plugin.
						</para>
					</listitem>
							
				</itemizedlist>
				
			</section>
			
			<section id="installing-rpm-yum">
				<title>Installing on RPM-Based Distributions Using Yum</title>
					
				<para>
					As long as Yum is configured to point at the OpenNMS repository,
					all you should need to run is:
					<programlisting>sudo yum install <varname>[packages]</varname></programlisting>
					...where <varname>[packages]</varname> is the list of packages above
					that you wish to install.
				</para>
					
			</section>
				
			<section id="installing-rpm-urpmi">
				<title>Installing on RPM-Based Distributions Using URPMI</title>
					
				<para>
					If URPMI is configured to point at the OpenNMS repository, you can install
					by running:
					<programlisting>sudo urpmi --auto <varname>[packages]</varname></programlisting>
					...where <varname>[packages]</varname> is the list of packages above
					that you wish to install.
				</para>
			</section>

			<section id="installing-rpm-manual">
				<title>Installing on RPM-Based Distributions Manually</title>
				
				<para>
					Download the packages you wish to install from the <ulink
					url="http://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=4151">SourceForge
					download page for OpenNMS</ulink>.
				</para>

				<para>
					Then, use <code>rpm -i</code> to install the packages:
					<programlisting>rpm -ivh opennms*.rpm</programlisting>
				</para>
				
				<note>
					<para>
						As of OpenNMS 1.3.10, you can use the <code>--relocate</code> flag to RPM
						if you wish to put the logs and collection data in an alternate location:
						<programlisting>rpm -ivh --relocate /var/opennms=/mnt/netapp/opennms-data /var/log/opennms=/mnt/netapp/opennms-logs opennms*.rpm</programlisting>
					</para>
				</note>
			</section>

		</section>

		<section id="installing-solaris">
			<title>Installing on Solaris</title>

			<para>
				Download the appropriate package for your Solaris version from the <ulink
				url="http://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=4151">SourceForge
				download page for OpenNMS</ulink>.
			</para>

			<para>
				Then, install the package using <code>pkgadd</code>:
				<programlisting><computeroutput># </computeroutput><command>cd /usr/local</command>
<computeroutput># </computeroutput><command>gzip -d opennms-*-local.gz</command>
<computeroutput># </computeroutput><command>pkgadd -d `pwd`/opennms-*-local</command></programlisting>
			</para>
		</section>

		<section id="installing-macosx">
			<title>Installing on Mac OS X</title>

			<para>
				OpenNMS is supported on Mac OS X via the <ulink
				url="http://www.finkproject.org/">Fink</ulink> project.
			</para>
			
			<para>
				Once you've installed Fink, you should be able to install OpenNMS by running:
				<programlisting>fink install opennms</programlisting>
			</para>
		</section>
		
		<section id="installing-windows">
			<title>Installing on Windows</title>
			
			<para>
				OpenNMS is supported on Windows as well, although the lack
				of true package management makes it a bit more work to maintain.
			</para>
			
			<para>
				To install on Windows, download the latest
				<filename>standalone-opennms-installer-X.X.X.jar</filename>
				file from <ulink
				url="http://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=4151">the
				OpenNMS SourceForge download page</ulink>.
			</para>
			
			<para>
				You should be able to then just double-click the jar file in
				Explorer, and follow the instructions in the install wizard.
			</para>
			
			<para>
				Once you're done, you may want to make a pristine copy of the
				<filename><varname>$OPENNMS_HOME</varname>/etc</filename> directory
				so it's easy to tell what's changed in later releases later.
			</para>
		</section>
	</section>

	<section id="upgrading">
		<title>Upgrading an Existing Installation</title>

		<section id="upgrading-preparation">
			<title>Upgrading: Preparation</title>

			<para>
				There are a number of things you can do that can help ease the transition
				when doing upgrades.
			</para>

			<section id="upgrading-preparation-prune-events">
				<title>Prune Unneeded Events</title>
				
				<para>
					Should you not be doing this already, either using vacuumd or
					cron, prune away any unneeded events.  The events table will most
					probably be the largest, and there's no point backing up data that
					you don't need.
				</para>
				
				<para>
					For example, to delete any events older than 6 weeks that have no
					associated outages, you can run, from the <filename>psql</filename>
					command-line:
					<programlisting>--# this deletes any events that are not associated with outages
DELETE FROM events WHERE NOT EXISTS 
  (SELECT svclosteventid FROM outages WHERE svclosteventid = events.eventid  
UNION 
  SELECT svcregainedeventid FROM outages WHERE svcregainedeventid = events.eventid 
UNION 
  SELECT eventid FROM notifications WHERE eventid = events.eventid) 
AND eventtime &lt; now() - interval '6 weeks';</programlisting>
				</para>
			</section>

			<section id="upgrading-preparation-backup-database">
				<title>Back Up Your Database</title>
				
				<para>
					Depending on the version you are upgrading <emphasis>from</emphasis> and the
					version you are upgrading <emphasis>to</emphasis>, you may run into issues with
					the database upgrade.  It is <emphasis>strongly recommended</emphasis> that
					you back up the database.
					<programlisting>pg_dump -U postgres -Fc -C -f opennms-database-backup.pg opennms</programlisting>
				</para>
			</section>

			<section id="upgrading-preparation-backup-etc">
				<title>Back Up Your OpenNMS <filename>etc</filename> Directory</title>
				
				<para>
					Back up your <filename>$OPENNMS_HOME/etc</filename> directory before doing any
					upgrades, so you can go back to your previous version if something goes wrong, and
					so you have a reference of your previous configuration when adapting config file
					changes to the new version.
					<programlisting>tar -C $OPENNMS_HOME -cvzf /tmp/opennms-etc-backup.tar.gz etc</programlisting>
				</para>
			</section>
			
			<section id="upgrading-preparation-determine-memory">
				<title>Assess the Events Table Size</title>
				
				<para>
					If you have a large number of events, you may need to increase the amount
					of memory passed to the OpenNMS <filename>install</filename> tool.  For example,
					if you have 250k events, you will need almost 600MB of heap.  When the time comes
					to run the <filename>install</filename> tool, assuming you have enough available
					memory, it's probably safe to just use a very large value to pass to
					<filename>install</filename>, like:
					<programlisting>install -Xms1024m -Xmx2048m -dis</programlisting>
				</para>
				
			</section>

		</section>

		<section id="upgrading-to-latest-yum">
			<title>Upgrading RPM-Based Distributions Using Yum</title>

			<para>
				If you have the OpenNMS Yum repositories configured, all you should need
				to do to get the new release is run:
				<programlisting>sudo yum upgrade opennms</programlisting>
			</para>
				
			<para>
				If you are comfortable letting your distribution give you OS updates along
				with OpenNMS, you can just run:
				<programlisting>sudo yum upgrade</programlisting>
			</para>
		</section>
			
		<section id="upgrading-to-latest-urpmi">
			<title>Upgrading RPM-Based Distributions Using URPMI</title>
			
			<para>
				If you have the OpenNMS URPMI repositories configured, you can upgrade by
				running:
				<programlisting>sudo urpmi --auto opennms</programlisting>
			</para>
				
			<para>
				As with Yum, if you are comfortable letting URPMI give OS updates along with
				OpenNMS, you can run:
				<programlisting>sudo urpmi --auto --auto-select opennms</programlisting>
			</para>
		</section>

		<section id="upgrading-to-latest-rpm-manual">
			<title>Upgrading RPM-Based Distributions Manually</title>
			
			<para>
				You can upgrade RPM systems manually by downloading the <ulink
				url="http://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=4151">RPM
				packages from SourceForge</ulink> and upgrade them by running:
				<programlisting>sudo rpm -Uvh opennms*.rpm</programlisting>
			</para>
		</section>

		<section id="upgrading-to-latest-debian">
			<title>Upgrading Debian-Based Distributions</title>
				
			<para>
				If your Debian or Ubuntu system is configured with the OpenNMS Apt
				repository, you should just need to run:
				<programlisting>sudo apt-get update
sudo apt-get -u install opennms</programlisting>
			</para>
		</section>

		<section id="upgrading-to-latest-windows">
			<title>Upgrading Windows</title>
			
			<para>
				Since there is no automated installation/upgrade procedure for
				Windows, you will have to do some preparation before installing
				the latest version.
			</para>
			
			<itemizedlist>
				<listitem>
					<para>Back up and then remove <filename><varname>$OPENNMS_HOME</varname>/etc</filename>.</para>
				</listitem>
				<listitem>
					<para>Remove <filename><varname>$OPENNMS_HOME</varname>/lib</filename>,
					<filename><varname>$OPENNMS_HOME</varname>/jetty-webapps/opennms/WEB-INF/lib</filename>.</para>
				</listitem>
			</itemizedlist>
			
			<para>
				Once you've cleaned up the etc and lib directories, the next
				step is to download the latest <filename>standalone-opennms-installer-X.X.X.jar</filename> from <ulink
				url="http://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=4151">the
				OpenNMS SourceForge download page</ulink>.
			</para>
			
			<para>
				Next, run the installer jar, and install over your existing OpenNMS location.
			</para>

			<para>
				If you backed up the pristine <code>etc</code> directory on your
				previous installation, you can compare it to the current one to see
				if there are any configuration changes you wish to integrate into
				your new install.
			</para>
			
			<para>
				Copy your backed up <code>etc</code> directory back into the
				<filename><varname>$OPENNMS_HOME</varname>/etc</filename> directory.
			</para>
			
			<para>
				You should now be able to run your upgraded OpenNMS.
			</para>
		</section>
	</section>

	<section id="installing-java-configure">
		<title>Configure Java for OpenNMS</title>

		<para>
			Before you can run the post-install, OpenNMS needs to be configured
			to use an appropriate Java Runtime Environment (JRE).  The OpenNMS tool
			<filename>runjava</filename> is used to set this up, and it can either
			search for a suitable JRE or you can tell it exactly which JRE to use.
		</para>

		<section id="installing-java-search">
			<title>Search for a JRE (suggested)</title>

			<para>
				Execute <filename>runjava</filename> with the "<code>-s</code>"
				option to search for a JRE:
			</para>

			<programlisting><computeroutput># </computeroutput><command>$OPENNMS_HOME/bin/runjava -s</command></programlisting>
		</section>

		<section id="installing-java-specify">
			<title>Configure a specific JRE</title>

			<para>
				Execute runjava with the "<code>-S &lt;path to JRE&gt;</code>"
				option to specify the exact JRE you want OpenNMS to use:
				<programlisting><computeroutput># </computeroutput><command>$OPENNMS_HOME/bin/runjava -S &lt;path to JRE's java executable&gt;</command></programlisting>
			</para>

		</section>
	</section>

	<section id="installing-opennms-install">
		<title>Run the OpenNMS Installer Application</title>

		<para>
			No matter which installation method above you choose, and whether
			you are performing a fresh install or an upgrade, you still need to run
			the OpenNMS installer.  This tool will setup the <code>opennms</code> database
			within PostgreSQL among other things.
		</para>

		<programlisting><computeroutput># </computeroutput><command>$OPENNMS_HOME/bin/install -l /usr/local/lib -dis</command></programlisting>

		<para>
			The "-l" parameter will look for the jicmp and/or jrrd libraries
			in the location specified. The "-dis" will initialize and check the
			database.  Note at the end of the output from the installer it will
			indicate if iplike has been installed properly.
		</para>
		<para>
			For a full list of options the installer accepts, run
			"<code>$OPENNMS_HOME/bin/install -h</code>".
		</para>
	</section>

</chapter>
