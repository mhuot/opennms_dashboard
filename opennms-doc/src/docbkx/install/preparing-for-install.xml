<?xml version="1.0" encoding="UTF-8"?>
<chapter id="preparing-for-install">
	<title>Preparing for install</title>

	<section id="before-you-begin">
		<title>Before You Begin</title>

		<section id="yum">
			<title>Configure RPM-based Distributions with Yum</title>
			
			<para>
				Before you begin installing, you will want to set up Yum to install from
				the OpenNMS repositories.  This covers most RPM-based distributions, including
				<ulink url="http://www.redhat.com/rhel/">Red Hat Enterprise Linux</ulink>,
				<ulink url="http://fedoraproject.org/">Fedora</ulink>, and
				<ulink url="http://www.centos.org/">CentOS</ulink>.
			</para>
			
			<section id="yum-fastestmirror">
				<title>Preparation: Yum Fastest Mirror Plugin</title>
				
				<para>
					Before you start, you may want to install the yum-fastestmirror RPM if your distro
					supports it.  This can often speed up downloads of large packages.  See the
					<ulink url="http://wiki.centos.org/PackageManagement/Yum/FastestMirror">CentOS Wiki</ulink>
					for more details.  This step is not strictly necessary, but can make your overall
					yum experience better.
				</para>
				
				<para>
					<programlisting>[user@localhost]$ sudo yum install yum-fastestmirror
 Setting up Install Process
 ...
 Running Transaction
   Installing: yum-fastestmirror            ######################### [1/1] 
 
 Installed: yum-fastestmirror.noarch 0:1.1.9-2.fc8
 Complete!</programlisting>
 				</para>
			
			</section>

			<section id="choose-a-release">
				<title>Preparation: Determine Which Release to Install</title>
				
				<para>There are 4 types of releases available through yum.</para>

				<itemizedlist>
					<listitem id="stable">
						<para>
							<emphasis>stable:</emphasis>
							the latest officially released stable version of OpenNMS
						</para>
					</listitem>
					<listitem id="unstable">
						<para>
							<emphasis>unstable:</emphasis>
							the latest officially released development version of OpenNMS
						</para>
					</listitem>
					<listitem id="testing">
						<para>
							<emphasis>testing:</emphasis>
							a nightly build of the code that will be part of the next stable version of OpenNMS
						</para>
					</listitem>
					<listitem id="snapshot">
						<para>
							<emphasis>snapshot:</emphasis>
							a nightly build of the very latest development version of OpenNMS
						</para>
					</listitem>
				</itemizedlist>
			</section>

			<section id="install-repository-rpm">
				<title>Install the OpenNMS Repository RPM</title>
				
				<para>
					To simplify installation through Yum, we've created an RPM that contains the configuration
					necessary for Yum to be able to find the other OpenNMS packages.  Based on the release you
					chose in the section above, choose the approprate RPM from the <ulink
					url="http://yum.opennms.org/">OpenNMS Yum Repository</ulink>.
				</para>
				
				<para>
					For example, to install the latest snapshot release on Fedora 7, you would run:
					<programlisting>rpm -Uvh http://yum.opennms.org/repofiles/opennms-repo-snapshot-fc7.noarch.rpm</programlisting>
				</para>

				<para>
					Or, to install the latest unstable release on CentOS or RHEL 5, you would run:
					<programlisting>rpm -Uvh http://yum.opennms.org/repofiles/opennms-repo-unstable-rhel5.noarch.rpm</programlisting>
				</para>

				<para>
					Now you should see OpenNMS packages available when you get a list of yum packages:
					<programlisting> [user@localhost]$ sudo yum list opennms
 ...
 Available Packages
 opennms.noarch                           1.5.96-1               opennms-unstable</programlisting>
 				</para>
 				
 				<note>
 					<para>
 						If you are using older yum-based distributions (like CentOS 3, for example), you may
 						need to append the yum configuration to <filename>/etc/yum.conf</filename>.  Older
 						versions of yum don't recognize <filename>/etc/yum.repos.d/</filename> as a valid
 						location for yum configuration.  You can fix this by using <filename>cat</filename>
 						to append the repository configurations to <filename>/etc/yum.conf</filename>:
 						<programlisting>[root@localhost]# cat /etc/yum.repos.d/* &gt;&gt; /etc/yum.conf</programlisting>
 					</para>
 				</note>
			</section>

		</section>		

		<section id="urpmi">
			<title>Configure RPM-based Distributions with URPMI (Mandriva)</title>

			<section id="urpmi-official">
				<title>Enable the Primary Mandriva Repositories</title>

				<para>
					First, you'll want to enable the primary Mandriva URPMI repositories.  The
					easiest way to do so is to follow the instructions at <ulink
					url="http://easyurpmi.zarb.org/">EasyURPMI</ulink>.  For example, on Mandriva
					Linux 2007, you would end up running something like this:
					<programlisting>urpmi.addmedia main ftp://mirrors.usc.edu/pub/linux/distributions/mandrakelinux/official/2007.1/i586/media/main/release with media_info/hdlist.cz 
 urpmi.addmedia --update main_updates ftp://mirrors.usc.edu/pub/linux/distributions/mandrakelinux/official/2007.1/i586/media/main/updates with media_info/hdlist.cz</programlisting>
 				</para>
			</section>

			<section id="urpmi-opennms">
				<title>Enable the OpenNMS Mandriva Repositories</title>
				
				<para>
					Now, you'll need to enable the OpenNMS Mandriva repositories.  First, add
					the OpenNMS stable repository (replace mandriva2007 with your release):
					<programlisting>urpmi.addmedia --probe-hdlist opennms-stable http://yum.opennms.org/stable/mandriva2007</programlisting>
				</para>
				
				<para>
					If you want OpenNMS stable snapshots, add the testing repository next
					(replace mandriva2007 with your release):
					<programlisting>urpmi.addmedia --probe-hdlist opennms-testing http://yum.opennms.org/testing/mandriva2007</programlisting>
				</para>
				
				<para>
					If you want the latest unstable version, add the unstable as well
					(replace mandriva2007 with your release):
					<programlisting>urpmi.addmedia --probe-hdlist opennms-unstable http://yum.opennms.org/unstable/mandriva2007</programlisting>
				</para>
				
				<para>
					And if you want to install nightly snapshots, then add the snapshot one
					(replace mandriva2007 with your release):
					<programlisting>urpmi.addmedia --probe-hdlist opennms-snapshot http://yum.opennms.org/snapshot/mandriva2007</programlisting>
				</para>
			</section>
					
		</section>

		<section id="debian">
			<title>Configure Debian-Based Distributions</title>

			<section id="debian-sources-lst">
				<title>Add the OpenNMS Repository to Your <filename>sources.list</filename></title>
				
				<para>
					First, you need to tell apt-get how to find OpenNMS. Add the following
					contents to your <filename>/etc/apt/sources.lists</filename> file:
					<programlisting>deb http://debian.opennms.org stable main
deb-src http://debian.opennms.org stable main</programlisting>
				</para>
				
				<para>
					If you wish to use the latest development version of OpenNMS, add
					unstable instead:
					<programlisting>deb http://debian.opennms.org unstable main
deb-src http://debian.opennms.org unstable main</programlisting>
				</para>

			</section>

			<section id="debian-pgp">
				<title>Add the OpenNMS PGP Key to APT</title>
				
				<para>
					The OpenNMS Debian repository is signed with a PGP key (fingerprint
					<code>22EE DDA6 8698 B02F B2EC 50B7 062B 8A68 4C4C BBD9</code>).
					You will need to tell APT about the key:
					<programlisting>wget -O - http://debian.opennms.org/OPENNMS-GPG-KEY | sudo apt-key add -</programlisting>
				</para>
			</section>

		</section>

	</section>

	<section id="java">
		<title>Prerequisite Package: Java</title>

		<para>
			OpenNMS is written mainly in Java, although there are a few JNI
			calls to some C code in order to implement things such as ICMP. and so it
			follows that Java would need to be installed.
 		</para>

		<para>
			OpenNMS requires Java SE 5.0 or higher (JDK 1.5). It is recommended that the
			JDK from Sun is used with OpenNMS. If OpenNMS is to be run on a 64-bit system,
			be sure to install the 64-bit JDK.
		</para>

		<section id="java-yum">
			<title>Installing Java on RPM-based Distributions Using Yum</title>

			<para>
				The Sun JDK is available in our Yum repository.  If you have configured Yum
				as specified above, you just need to run:
				<programlisting>yum install jdk</programlisting>
			</para>
			
			<para>
				Because of a bug in the 64-bit RPM signing, if you are on x86_64, you will
				need to disable GPG checking.  You can do so with the <code>--nogpgcheck</code>
				option to yum:
				<programlisting>yum --nogpgcheck install jdk</programlisting>
			</para>

		</section>

		<section id="java-urpmi">
			<title>Installing Java on RPM-based Distributions Using URPMI</title>

			<para>
				The Sun JDK is available in our URPMI repository.  If you have configured
				URPMI as specified above, you just need to run:
				<programlisting>urpmi --auto jdk</programlisting>
			</para>
			
		</section>

		<section id="java-debian">
			<title>Installing Java on Debian or Ubuntu</title>

			<para>Sun's Java can now be installed using "apt" on Debian Etch or higher.</para>

			<para>
				<programlisting>apt-get install sun-java5-jdk</programlisting>
			</para>

			<para>
				This should also work on Ubuntu 6.10 (Edgy Eft) or higher.  Alternatively,
				you could install sun-java6-jdk, which has performance improvements over
				the java5 version.
			</para>
		</section>

		<section id="java-other">
			<title>Installing Java on Other Platforms</title>

			<note>
				<para>
					It is important to install the JDK instead of the JRE, as the web UI
					will need to compile JSPs into Java code.
				</para>
			</note>

			<para>
				You will need to use Sun's Java SE, version 5 (1.5) or later. You can
				<ulink url="http://java.sun.com/javase/downloads/index_jdk5.jsp">download
				it</ulink> from Sun's <ulink url="http://java.sun.com/">Java</ulink>
				website. Step through the licensing process and then download the
				proper version of Java for your operating system.
			</para>
		</section>
	</section>

	<section id="postgresql">
		<title>Prerequisite Package: PostgreSQL</title>

		<para>
			<ulink url="http://www.postgresql.org/">PostgreSQL</ulink>
			(or "Postgres") is a relational database that OpenNMS uses to store
			information about devices on the network, as well as information about
			events, notifications and outages.
		</para>

		<para>
			When installing OpenNMS, two things must happen. First, OpenNMS has
			to be able to contact the database over TCP/IP (even on localhost) and
			second, the installation process must be able to create the
			database.
		</para>

		<para>OpenNMS requires version 7.4 or later of PostgreSQL,
			although 8.1 or higher is recommended for performance reasons.</para>

		<section id="postgresql-yum">
			<title>Installing PostgreSQL on RPM-Based Distributions Using Yum</title>
			
			<para>
				On modern versions of Red Hat Enterprise Linux, CentOS, and Fedora,
				you should just need to install the <filename>postgresql-server</filename>
				RPM:
				<programlisting>[user@localhost]$ sudo yum -y install postgresql-server
Setting up Install Process
...
Running Transaction
  Installing: postgresql-server            ######################### [1/1] 

Installed: postgresql-server.x86_64 0:8.2.5-1.fc8
Complete!</programlisting>
			</para>
		
			<note>
				<para>
					Red Hat Enterprise Linux 3 and CentOS 3 call their PostgreSQL
					packages "rhdb" for the "Red Hat DataBase" so if you are on one of
					these older distributions, you will have to substitute "rhdb" for
					"postgresql" when installing:
					<programlisting>sudo yum -y install rhdb-server</programlisting>
				</para>
			</note>
			
		</section>

		<section id="postgresql-urpmi">
			<title>Installing PostgreSQL on RPM-Based Distributions Using URPMI</title>
			
			<para>
				On Mandriva, you use URPMI to install the PostgreSQL server:
				<programlisting>sudo urpmi --auto postgresql-server</programlisting>
			</para>
		</section>
		
		<section id="postgresql-debian">
			<title>Installing PostgreSQL on Debian-Based Distributions</title>
			
			<para>
				On Debian or Ubuntu, use apt to install the PostgreSQL server:
				<programlisting>sudo apt-get update
sudo apt-get install postgresql-8.1</programlisting>
			</para>
			
		</section>

		<section id="postgresql-windows">
			<title>Installing PostgreSQL on Windows</title>
			
			<para>
				On Windows, all you should need to do is get the latest Windows installer
				from <ulink url="http://www.postgresql.org/download/">PostgreSQL.org</ulink>.
			</para>

			<note>
				<para>
					If you are running on a FAT32 filesystem, see the <ulink
					url="http://www.opennms.org/index.php/Installation:Windows">detailed
					installation instructions on the wiki</ulink>.
				</para>
			</note>
						
			<para>
				First, unpack the installer.  The installer does not run properly from
				inside a zipped folder, so you will need to extract the ZIP file.  You
				should be able to just copy the postgresql-X.X.msi and
				postgresql-X.X-int.msi files to your desktop and run them from there.
			</para>

			<para>
				Then, run the postgresql-X.X.msi and follow the instructions.   For the most
				part, the defaults should be just fine, although if you're allowing the
				installer to initialize your database, make sure the encoding is set
				to "UTF-8".
			</para>
		</section>

		<section id="postgresql-configure">
			<title>Configure PostgreSQL</title>
			
			<para>
				Once you have installed PostgreSQL, you will need to make two changes
				to Postgres configuration files:
				<filename>postgresql.conf</filename> and <filename>pg_hba.conf</filename>.
			</para>
			<para>
				These files are only created once PostgreSQL has been started, so if
				your installation method for Postgres did not start the database, do
				so before continuing.  Usually, startup scripts will be placed in
				<filename>/etc/init.d</filename>.
			</para>

			<para>Locate the Postgres "data" directory. Often this is <filename>/var/lib/pgsql/data</filename>.
			You should then find the two files we need to modify in that directory.</para>

			<section id="postgresql.conf">
				<title>The <filename>postgresql.conf</filename> File</title>

				<para>
					This file controls some basic parameters of PostgreSQL.  We need to
					change three of these parameters.
				</para>

				<orderedlist>
					<listitem>
						<para>
							First we need to make sure PostgreSQL is listening on an IP socket, and not
							just a local unix socket.
						</para>
						<para>
							For PostgreSQL 7.4 and 8.0, make sure the following
							line is set and uncommented:
							<programlisting>tcpip_socket = true</programlisting>
						</para>
						<para>
							On PostgreSQL 8.1 and up, use this instead:
							<programlisting>listen_addresses = 'localhost'</programlisting>
						</para>
					</listitem>

					<listitem>
						<para>
							Next, find the line in the file that contains
							<varname>max_connections</varname>. It needs to be at least:
						</para>

						<para>
							<programlisting>max_connections = 256</programlisting>
						</para>
					</listitem>

					<listitem>
						<para>
							Find the line that contains <varname>shared_buffers</varname>.
							It needs to be at least:
							<programlisting>shared_buffers = 1024</programlisting>
						</para>
					</listitem>
				</orderedlist>
			</section>

			<section id="pg_hba.conf">
				<title>Customizing the <filename>pg_hba.conf</filename> File</title>

				<para>
					The <filename>pg_hba.conf</filename> file controls which machines
					and users can access the database on a given machine via TCP/IP.
				</para>

				<para>
					Since that is how OpenNMS accesses the database (via <code>localhost</code>)
					it is necessary to modify this file to allow OpenNMS to work.  The easiest
					thing to do is to just allow anyone from the localhost to access the database
					(do not add the last line if your system does not support IPv6):
				</para>

				<para>
					<programlisting># TYPE DATABASE USER IP-ADDRESS IP-MASK METHOD
local all all trust
host all all 127.0.0.1 255.255.255.255 trust
host all all ::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff trust</programlisting>
				</para>

				<para>
					Make sure that no other lines are uncommented in this file.
				</para>

				<para>
					You will need to stop and restart Postgres after making these changes.
				</para>
			</section>

			<section id="postgresql-create">
				<title>Creating the PostgreSQL Database</title>

				<para>
					Most distributions will automatically initialize the default database
					on first startup, but if yours doesn't (for example, on Solaris), you
					will need to do so manually.
				</para>

				<para>
					As the <code>postgres</code> user, go to the
					<filename>/usr/local/pgsql/bin</filename> directory (or wherever your PostgreSQL
					binaries are installed), and run:
					<programlisting>./initdb -D /usr/local/pgsql/data -E "UNICODE"</programlisting>
				</para>

				<para>
					Then you'll need to start the database:
					<programlisting>./pg_ctl -D /usr/local/pgsql/data start</programlisting>
				</para>

			</section>

			<section id="postgresql-iplike">
				<title>Adding the iplike function</title>

				<para>
					OpenNMS makes heavy use of a stored procedure called "iplike".  Since it is
					written in C, it has been removed from the main OpenNMS code and placed
					in its own project.
				</para>

				<para>
					If a C-based iplike is not installed, the OpenNMS installer will
					add a version written in the PostgreSQL command language. It will work,
					but not as quickly as the compiled iplike will.
				</para>

				<para>
					To install iplike, simply download the proper package for your
					distribution. There should be a package for PostgreSQL versions 7.4-8.1,
					and one for 8.2+. In addition, there will be separate 32-bit and 64-bit
					versions. It is also possible to download a tarball from the <ulink
					url="https://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=235604">OpenNMS
					SourceForge project page</ulink>, and do the usual "./configure", "make", and "make
					install".  Once installed it should not be required to update it on every
					OpenNMS upgrade.
				</para>
			</section>

		</section>

	</section>
	
	<section id="installing-jicmp">
		<title>Prerequisite Package: JICMP</title>

		<para>
			Java has never had a really good API for ICMP. Since ICMP is the basis for
			the "ping" command, it is rather imperative that any Java-based network
			management platform address the need for ICMP.  OpenNMS does this by using
			some code written in C, and accessing it using the Java Native Interface
			(JNI).
		</para>

		<para>
			As of OpenNMS 1.3.6, the ICMP code has been moved to it's own library
			outside of OpenNMS.  This makes the main OpenNMS application pure Java, and
			as such it only has to be built once, instead of for each platform.
		</para>

		<para>
			Packages for JICMP are available for most distributions.  If your
			distribution does not have packages available, you can download the
			source from <ulink
			url="http://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=240236">the
			SourceForge download page for JICMP</ulink>.
		</para>

		<section id="installing-jicmp-yum">
			<title>Installing JICMP on RPM-Based Distributions Using Yum</title>
			
			<para>
				On most RPM-Based Distributions, all you should need to run is:
				<programlisting>yum install jicmp</programlisting>
			</para>

		</section>

		<section id="installing-jicmp-urpmi">
			<title>Installing JICMP on RPM-Based Distributions Using URPMI</title>
		
			<para>
				On Mandriva, you can install JICMP with the command:
				<programlisting>urpmi --auto jicmp</programlisting>
			</para>
		</section>
	
		<section id="installing-jicmp-rpm">
			<title>Installing JICMP on RPM-Based Distributions from Source</title>
			
			<para>
				If JICMP has not already been compiled on your RPM-based platform, you
				can build a native RPM from the <ulink
				url="http://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=240236">source
				tarball</ulink> like so:
				<programlisting>rpmbuild -tb <filename>jicmp-X.X.X.tar.gz</filename></programlisting>
			</para>
			
			<para>
				If you are on a 64-bit platform, you can build a 64-bit RPM instead
				like so:
				<programlisting>rpmbuild --target=x86_64 <filename>jicmp-X.X.X.tar.gz</filename></programlisting>
			</para>
		</section>
			
		<section id="installing-jicmp-debian">
			<title>Installing JICMP on Debian-Based Distributions</title>
			
			<para>
				On Debian or Ubuntu, you can install JICMP through apt:
				<programlisting>sudo apt-get install libicmp-jni</programlisting>
			</para>
		</section>

		<section id="installing-jicmp-source">
			<title>Installing JICMP from Source</title>
			
			<para>
				To build from source, download the <ulink
				url="http://sourceforge.net/project/showfiles.php?group_id=4141&amp;package_id=240236">latest
				source tarball from SourceForge</ulink>, unpack it, and run the usual:
				<programlisting>./configure
make
make install</programlisting>
			</para>
			
		</section>

	</section>
</chapter>