package org.opennms.netmgt.correlation.drools

import java.util.Date;

import org.opennms.netmgt.correlation.drools.CorrelationExample.EventBean;
import org.opennms.netmgt.correlation.drools.CorrelationExample.Outage;
import org.opennms.netmgt.correlation.drools.CorrelationExample.Node;
import org.opennms.netmgt.correlation.drools.CorrelationExample.PossibleCause;

rule "openIssue"
	salience 100
	when
		$e : EventBean( uei matches "nodeDown", $node : node )
	then
		println( "Found nodeDown event " + $e + " for node " + $node );
		Outage $outage = new Outage( $node, $e );
		insert( $outage );
		
		PossibleCause $cause = new PossibleCause( $node, $outage, true );
		insert( $cause );
		
		retract( $e );
		println( "Initial Possible cause: " + $cause ); 
end

rule "parentDependency"
	salience 100
	when
		PossibleCause( $node : node -> ( $node.getParent() != null ) , $outage : outage )
		not ( PossibleCause( $node2 : node -> ( $node2 == $node.getParent() ), outage == $outage ) )
	then
	    PossibleCause $cause = new PossibleCause( $node.getParent(), $outage );
		insert( $cause );
		println( "Possible cause: " + $cause );
end

rule "causeTimeout"

	duration 10000
	when
		$possibleCause : PossibleCause( verified == false )
	then
		println( "Retracting " + $possibleCause + " since we didn't verify it in one cycle");
		retract( $possibleCause );
end 

rule "verify possible causes"
	salience 100
	when
		$possibleCause : PossibleCause( $node : node, verified == false )
		$outage : Outage( node == $node )
	then
		$possibleCause.setVerified( true );
		update( $possibleCause );
		println( "Verified " + $possibleCause );
end
	
rule "parentless node is its own root cause"
	salience 100
	when
		$possibleCause : PossibleCause( $node : node -> ( $node.getParent() == null ), $outage: outage, verified == true )
		Outage( node == $node )
	then
		$outage.setCause( $node );
		println( $outage );
		update( $outage );
		println( "Found root cause for " + $outage + " : " + $node + " since it has no parents");
end

rule "no parent causes possible"
	salience 200
	when
		$outage : Outage( cause == null )
		$pc : PossibleCause( $node : node -> ( $node.getParent() != null ), outage == $outage, verified == true )
		$o : Outage( node == $node )
		not( PossibleCause( node == ( $node.getParent() ), outage == $outage ) )
	then
		$outage.setCause( $node );
		update( $outage );
		println( "Found root cause for " + $outage + " : " + $node + " since its parent cause is resolved.");
end

function void println(Object msg) {
	System.out.println(System.currentTimeMillis()+" : "+msg);
}


